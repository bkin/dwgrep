-*-org-*-
* Introduction

  (See http://pmachata.github.io/dwgrep/ for a full HTML
  documentation.)

  Dwgrep is a tool and an associated language for querying Dwarf
  (debuginfo) graphs.  If you want to find out more about Dwarf, you
  can check out the following links.  But you can also pretend that
  Dwarf is like XML, except nodes are called DIE's.  That, and
  perusing the output of eu-readelf -winfo, should be enough to get
  you started.

    http://www.dwarfstd.org/doc/Debugging%20using%20DWARF.pdf
    http://dwarfstd.org/Download.php

  You can think of dwgrep expressions as instructions describing a
  path through a graph, with assertions about the type of nodes along
  the way: that a node is of given type, that it has a given
  attribute, etc.  There are also means of expressing sub-conditions,
  i.e. assertions that a given node is acceptable if a separate
  expression matches (or doesn't match) a different path through the
  graph.

  Apart from Dwarf objects (DIE's and Attributes), dwgrep expressions
  can work with integers, strings, and sequences of other objects.

  In particular, a simple expression in dwgrep might look like this:

  : entry ?DW_TAG_subprogram child ?DW_TAG_formal_parameter @DW_AT_name

  On a command line, you would issue it like this:

  : dwgrep /some/file/somewhere -e 'entry ?DW_TAG_subprogram ...etc....'

  The query itself (ignoring the initial colon that's part of
  meta-syntax) says: show me values of attribute DW_AT_name of
  DW_TAG_formal_parameter nodes that are children of DW_TAG_subprogram
  entries (which here means debug information entries, or DIE's).
  Reading forward, you get list of instructions to a matcher: take
  DIE's, accept all DW_TAG_subprogram's, look at their children,
  accept those that are DW_TAG_formal_parameter, take value of
  attribute DW_AT_name.

  Another example comes from dwarflint:

  : entry ?DW_AT_decl_column !DW_AT_decl_line

  ... which looks for DIE's that have DW_AT_decl_column, but don't
  have DW_AT_decl_line--a semantic violation that is worth reporting.

* Representation of Dwarf graph
** Vocabulary
   - next, prev -- horizontal tree access

** ·T_DWARF
***  symbol :: ?T_DWARF ->* ?T_ELFSYM
     - Yields all symbols in .symtab, or minisymtab, or .dynsym.

** ·T_CU
***  next :: ?T_CU ->? T_CU
***  prev :: ?T_CU ->? T_CU

** ·T_DIE
***  next :: ?T_DIE ->? ?T_DIE
     Like dwarf_siblingof, returns next sibling of the DIE.

     : def next {|D| D parent child (pos == D parent child (== D) pos 1 add)}

     The first line is necessary to make sure that pos later refers
     to order in children array, not to e.g. a result of ([XYZ] each).

***  prev :: ?T_DIE ->? ?T_DIE
     The opposite of next.

*** •@AT_decl_file
     Value of this attribute is represented as actual string including
     path.

     (XXX we ignore mtime and size.  Those aren't stored anyway, but
     maybe it would be useful to have them so that one can do this
     sort of querying in the first place--do we have any files where
     this is stored?  Or after it gets to be stored in general, where
     this is _not_ stored?)

***  ?LANG_* :: ?T_DIE
     Holds if (@AT_language == DW_LANG_*).

***  ?ATE_* :: ?T_DIE
     Holds if @AT_encoding == DW_ATE_*.

** ·T_ATTR
***  ?LANG_* :: ?T_ATTR
     Holds if (?AT_language value == DW_LANG_*).

***  ?ATE_* :: ?T_ATTR
     Holds if (?AT_encoding value == DW_ATE_*)

**  T_ELFSYM
***  label :: ?T_ELFSYM -> ?T_CONST
     Yields symbol type, such as STT_FUNC.

***  address :: ?T_ELFSYM -> ?T_ASET
     Yield symbol value.

***  name :: ?T_ELFSYM -> ?T_STR
***  size :: ?T_ELFSYM -> ?T_CONST
***  bind :: ?T_ELFSYM -> ?T_CONST
***  vis :: ?T_ELFSYM -> ?T_CONST
***  index :: ?T_ELFSYM ->? ?T_CONST
     XXX or maybe @section?

***  symbol :: ?T_CONST ->? T_ELFSYM
     This find a symbol associated with an address on TOS.  The match
     doesn't have to be exact, offset would then be:
     : let A := some addr; A symbol dup address A sub
     :  # now TOS has offset and below TOS is symbol

     XXX some of this is fairly easy to get by cross-matching like
     this:
     : symtab (address == some addr)
     fuzzy matching (getting symbol/offset) would be more involved.

**  T_MACRO_UNIT ???
    - A value representing .debug_macro and .debug_macinfo units.
      Might be useful for DW_MACRO_GNU_transparent_include opcode, and
      for DW_AT_macro_info and DW_AT_GNU_macros attributes, which
      would hold this as a value.

***  entry :: ?T_MACRO_UNIT ->* ?T_MACRO_ENTRY
***  offset :: ?T_MACRO_UNIT ->* ?T_CONST
***  XXX :: something to get the prototype table???

**  T_MACRO_ENTRY
    - A value used for representing both .debug_macro and
      .debug_macinfo entries.  Domain of entry label disambiguates
      which is which.

***  label :: ?T_MACRO_ENTRY -> ?T_CONST
     - Opcode of this macro entry.

***  attribute :: ?T_MACRO_ENTRY ->* ?T_MACRO_ATTRIBUTE
     - Yields value(s) associated with this opcode.
     - XXX could we somehow query a form?

***  merge :: ?T_MACRO_ENTRY ->* ?T_MACRO_ENTRY
     : let merge := { ?DW_MACRO_GNU_transparent_include value };

     Should be used as with DIE's, depending on what exactly is needed
     either (merge*) or (merge* !(merge)).

***  @0, @1, ... or something???
     - Should this resemble DIE's or T_LOCLIST_OP's?  Shouldn't
       T_LOCLIST_OP's actually resemble DIE's as well?  @X as a
       shorthand for (value (pos == X)) seems fairly natural.

       If X is a name instead of a number, it means:
       : (attribute (label == X))

**  T_MACRO_ATTRIBUTE ???
    - Note that label is explicitly not applicable
***  value
***  form


* Examples

** check_die_line_info:
   : let A := entry (?TAG_subprogram, ?TAG_inlined_subroutine, ?TAG_entry_point,
   :                ?TAG_lexical_block, ?TAG_label, ?TAG_with_stmt,
   :                ?TAG_try_block, ?TAG_catch_block);
   : let B := A (@AT_entry_pc, address);
   : let C := A root address;
   : ?(B C !overlaps || B C overlap != B)
   : "Address range %( B %) referenced from %( A %)"\
   : " not fully covered by line table."

** CU A imports two PU's B and C, and both import the same third PU

   : let imports := {root child ?TAG_imported_unit @AT_import};
   :
   : let U := entry ?root ;
   : let A := U child ?TAG_imported_unit @AT_import ;
   : let B := U child ?TAG_imported_unit @AT_import (> A) ;
   : A imports B imports (== swap)
   : "PU %(offset%) is imported by PU's %(A offset%) and %(B offset%), "\
   : "which are both imported by %(U offset%)."
