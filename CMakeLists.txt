CMAKE_MINIMUM_REQUIRED (VERSION 2.8.8)
PROJECT (DwGrep C CXX)

INCLUDE (${CMAKE_SOURCE_DIR}/VERSION.cmake)
SET (VERSION ${DWGREP_MAJOR}.${DWGREP_MINOR})

CONFIGURE_FILE ("${CMAKE_CURRENT_SOURCE_DIR}/version.h.in"
  		"${CMAKE_CURRENT_BINARY_DIR}/version.h"
		@ONLY)

INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/libzwerg)
INCLUDE_DIRECTORIES (${CMAKE_BINARY_DIR})

SET (CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)

INCLUDE (CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG ("-std=c++11" COMPILER_SUPPORTS_CXX11)
IF (COMPILER_SUPPORTS_CXX11)
  SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
ELSE ()
  MESSAGE (FATAL_ERROR "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support.")
ENDIF ()

SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wnon-virtual-dtor -O2 -g")

FIND_PACKAGE (DWARF REQUIRED)
FIND_PACKAGE (FLEX REQUIRED)
FIND_PACKAGE (BISON REQUIRED)

FIND_PACKAGE (GTest)
IF (GTEST_FOUND)
  INCLUDE_DIRECTORIES (${GTEST_INCLUDE_DIRS})
ENDIF ()

FIND_PACKAGE (Sphinx)
IF (SPHINX_EXECUTABLE)
  ADD_SUBDIRECTORY (doc)
ELSE ()
  MESSAGE (STATUS "Sphinx not found, documentation will NOT be built.")
ENDIF ()

ENABLE_TESTING ()

ADD_SUBDIRECTORY (libzwerg)
ADD_SUBDIRECTORY (dwgrep)
ADD_SUBDIRECTORY (tests)
