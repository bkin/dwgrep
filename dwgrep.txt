-*-org-*-
* Introduction

  Dwgrep is a tool and an associated language for querying Dwarf
  (debuginfo) graphs.  If you want to find out more about Dwarf, you
  can check out the following links.  But you can also pretend that
  Dwarf is like XML, except nodes are called DIE's.  That, and
  perusing the output of eu-readelf -winfo, should be enough to get
  you started.

    http://www.dwarfstd.org/doc/Debugging%20using%20DWARF.pdf
    http://dwarfstd.org/Download.php

  You can think of dwgrep expressions as instructions describing a
  path through a graph, with assertions about the type of nodes along
  the way: that a node is of given type, that it has a given
  attribute, etc.  There are also means of expressing sub-conditions,
  i.e. assertions that a given node is acceptable if a separate
  expression matches (or doesn't match) a different path through the
  graph.

  Apart from Dwarf objects (DIE's and Attributes), dwgrep expressions
  can work with integers, strings, and sequences of other objects.

  In particular, a simple expression in dwgrep might look like this:

  : winfo ?DW_TAG_subprogram child ?DW_TAG_formal_parameter @DW_AT_name

  Which (ignoring the initial colon that's part of meta-syntax) says:
  show me values of attribute DW_AT_name of DW_TAG_formal_parameter
  nodes that are children of DW_TAG_subprogram nodes in .debug_info.
  Reading forward, you get list of instructions to a matcher: take
  .debug_info nodes, accept all DW_TAG_subprogram's, look at their
  children, accept those that are DW_TAG_formal_parameter, take value
  of attribute DW_AT_name.

  Another example comes from dwarflint:

  : winfo ?DW_AT_decl_column !DW_AT_decl_line

  ... which looks for DIE's that have DW_AT_decl_column, but don't
  have DW_AT_decl_line--a semantic violation that is worth reporting.


* Computation

  Conceptually, dwgrep expressions form a pipeline of functions.  The
  Dwarf graph under consideration flows through this pipeline,
  modified by each function of the overall expression, and whatever
  comes out of the other end is the result of the query.

  We call what flows through the dwgrep expression a /working set/.
  Initial working set is empty.  Expressions will typically start with
  selecting an appropriate working set--such as "winfo" seen above.

  As the working set is transformed, its elements can be more than
  just DIE's--as mentioned, they can be also integers, strings, etc.

  Each function takes on input an element of the working set, and
  produces zero or more elements on the output.  Note that producing
  several elements is different from producing an element that holds a
  single value of type sequence.  When a function is applied on a
  working set element, the following can happen:

  - that element is removed (if a function doesn't yield anything)
  - the element is changed for another
  - that element is "forked", replaced with several elements

  When dwgrep expression is evaluated, the functions in the expression
  are applied to each element of the working set, and the output is
  collected to form a new working set.  The whole scheme is thus
  reminiscent of shell pipeline, except you have richer variety of
  types instead of lines.

  There is a subtle difference between values and elements: elements
  contain /stacks/ of values.  Functions in the pipeline consume one
  stack on input, and produce zero or more stacks on output.  If
  nothing is produced, that means that the computation stopped making
  sense: some assertion didn't hold, or an attribute was expected that
  was not available.  Such element is removed from the working set.
  On the contrary, a function can produce several stacks, which means
  that several possible paths forward exist.  The values on stack
  provide a context to the result.


* Introduction to the dwgrep language

  In following, examples are generally written as follows:

  : blah blah lorem ipsum stuff

  The initial colon is not part of the example, but an artifact of
  Emacs org-mode.

** winfo — domain selection

   Since the initial working set is empty, it is usually desirable to
   select the domain that the query should be run over.  Each Dwarf
   section has one domain designator (winfo, wline, etc.) (XXX though
   only winfo is implemented as of now), and there are also
   designators for ELF symbol tables (XXX also not implemented yet).

** ?DW_TAG_foo, ?TAG_foo — DIE tag assertion
** EXPR₁ EXPR₂ … — concatenation

   The assertion "?DW_TAG_foo" takes the value at top of stack (TOS).
   If its tag is not DW_TAG_ID, this function yields nothing.
   Otherwise it yields the input stack unchanged.  The functions which
   either yield an unmodified input or nothing at all are called
   assertions, and are very common in dwgrep expressions.

   You can write ?DW_TAG_foo also as ?TAG_foo, they do the same thing.
   In the following, that's how we will refer to this assertion.

   In dwgrep, function pipelines are formed by simply placing
   functions next to each other.  The stacks that the left function
   produces becomes an input of the right function.

   For example, to list all subprograms, one would use the following
   expression:

   : winfo ?TAG_subprogram

** ?DW_AT_foo, !DW_AT_foo — attribute presence/absence assertion

   "?DW_AT_foo" holds if the value on TOS is a DIE with an attribute
   DW_AT_foo, or if it is an attribute with the name DW_AT_foo.  As
   with tags (and any Dwarf-related assertions at all), you can
   shorten this to ?AT_foo.

   !DW_AT_foo similarly holds if the value on TOS is a DIE that does
   NOT have an attribute DW_AT_foo, or if it's an attribute whose name
   is NOT DW_AT_foo.

   For assertions, concatenation happens to work as a logical and, so
   for example, this is how we can get a list of all subprograms that
   have a declaration attribute:

   : winfo ?TAG_subprogram ?AT_declaration

   Similarly, to get subprograms that do not have declaration
   attribute, we say:

   : winfo ?TAG_subprogram !AT_declaration

** child — child traversal

   This function drops the DIE at TOS, and produces a set of stacks,
   each with one child pushed to TOS.  If applied on a childless DIE,
   it produces nothing, and such computations are thus dropped.  To
   get at the formal arguments of the subprograms from the previous
   example, one might say:

   : winfo ?TAG_subprogram !AT_declaration child

   If we want to make sure these children are actually formal
   parameters:

   : winfo ?TAG_subprogram !AT_declaration child ?TAG_formal_parameter

** @DW_AT_foo — value of attribute DW_AT_foo

   This is the first example of a function that can produce something
   else than Dwarf DIE's.  This will replace the DIE at TOS with a
   value of the attribute of that DIE.  E.g. we could obtain names of
   the formal parameters selected above:

   : winfo ?TAG_subprogram !AT_declaration child ?TAG_formal_parameter @AT_name

   The results would be strings with names of all formal parameters in
   the program.  That's not very useful, as that just lists a bunch of
   names.

   But there's another use of this same feature: for attributes with
   reference form, we get the effect of traversing over the edge
   rooted at given attribute.  For example, we could get types of
   formal parameters thus:

   : winfo ?TAG_subprogram !AT_declaration child ?TAG_formal_parameter @AT_type

   ... which is a bit more useful.  We might use this to discover
   whether some formal parameters have structure types, and would
   therefore incur a potentially expensive copy when the subprogram is
   invoked:

   : winfo ?TAG_subprogram !AT_declaration
   : child ?TAG_formal_parameter @AT_type ?TAG_structure_type

   So that will let us know whether there are any offenders like that.
   That's closer to being interesting, but not quite what we need
   either.  We would like to know about the subprograms themselves,
   that have this property!  Hence:

** ?(EXPR), !(EXPR) — Sub-expressions assertions

   Some dwgrep expressions are evaluated in what we call a
   sub-expression context.  What happens in sub-expression context,
   stays there--the stack effects of sub-expression computation never
   leak back to working set.

   ?(EXPR) expression is one such case.  It asserts that EXPR produces
   at least one element.  We can use it to get to DIE's that have
   arguments that are structures:

   : winfo ?TAG_subprogram !AT_declaration
   : ?(child ?TAG_formal_parameter @AT_type ?TAG_structure_type)

   This asks whether, after going to types of children that are formal
   parameters, we get a structure.  Because the initial two assertions
   have no stack effects anyway, we might say the same thing thus:

   : winfo ?(?TAG_subprogram !AT_declaration
   :         child ?TAG_formal_parameter @AT_type ?TAG_structure_type)

   The other sub-expression assertion, !(), holds if EXPR produces no
   values at all.  We don't need that, but we could use it to reword
   the query thus:

   : winfo ?TAG_subprogram !(?AT_declaration)
   : ?(child ?TAG_formal_parameter @AT_type ?TAG_structure_type)

   If a DIE is a pure declaration, the expression ?AT_declaration
   yields unchanged incoming stack.  But !() only holds for
   expressions that yield nothing at all, thus such DIE's are
   rejected.  More interesting uses of this feature include for
   example selecting child-less DIE's:

   : !(child)

** EXPR == EXPR, EXPR != EXPR — comparisons

   But actually mere ?AT_declaration doesn't tell us whether a DIE is
   a pure declaration.  We can probably safely assume that when a
   compiler produces that attribute, it will have a value of true (and
   a form of DW_FORM_flag_present), so most of the time
   ?AT_declaration (and !AT_declaration) is all you need to write.
   But if we are paranoid, or have grounds for suspicion this is not
   so, we need to actually look at DW_AT_declaration's value.  So
   instead of ?AT_declaration, we should be writing this:

   : (@AT_declaration == true)

   This intuitively-looking construct actually deserves a closer
   attention.  Comparison operators are always evaluated in
   sub-expression context.  The mode of operation is that each side is
   evaluated separately with the same incoming stack.  Then if the
   comparison holds for any pair of produced values, the overall
   assertion holds.  dwgrep has a full suite of these operators--!=,
   <, <=, etc.

   Importantly, comparisons are assertions.  If they hold, they
   produce unchanged incoming stack, otherwise they produce nothing at
   all.  Thus expressions such as ((A > B) == (C > D)) don't mean what
   they seem to.  This one for example is just ((A > B) (C > D))--i.e.
   two independent conditions.  But e.g. ((A > B) != (C > D)), if the
   two >'s hold, reduces to (!=) (inequality of two nops), which
   simply never holds.

   Precedence of comparison operators is lower than that of
   concatenation, so you can write a couple words on each side of the
   operator.  For example, to check whether one of the children has a
   specific name, you could say:

   : (child @AT_name == "foo")

   Due to this precedence, comparisons are typically enclosed in
   parens, so that they don't force too much of your computation into
   sub-expression context.  The precedence is however above "," and
   "||" that are introduced further, so those need to be parenthesized
   further if they should be a comparison operand.

   Back to the problem at hand--besides DW_TAG_structure_type, we care
   about DW_TAG_class_type as well!  We can express "and" easily
   simply by juxtaposing the assertions, but we would like a way of
   expressing "or" as well.

** EXPR, EXPR — alternative paths
** EXPR || EXPR — C-style fallback

   The former expression evaluates all constituent EXPR's with the
   same input, and then yields all values that each EXPR yields.  If
   the expressions are assertions, this happens to behave exactly like
   a logical or.  So:

   : winfo ?TAG_subprogram !AT_declaration
   : ?(child ?TAG_formal_parameter @AT_type
   :   (?TAG_structure_type, ?TAG_class_type))

   But the applicability is wider.  Since the semantics are
   essentially those of a fork, one can for example ask whether an
   attribute has one of a number of values:

   : (@AT_name == ("foo", "bar"))

   ... which is the same as:

   : (@AT_name == "foo", @AT_name == "bar")

   The || operator works differently.  It evaluates one expression
   after another, as long as those expressions don't yield anything.
   It thus yields whatever the first expression that actually yields
   anything yields.  It therefore operates in a manner similar to the
   operator || in C language.  The typical use would be in fallbacks.
   For example if we prefer DW_AT_MIPS_linkage_name to DW_AT_name, but
   can make do with the latter, that would be encoded as follows:

   : winfo (@AT_MIPS_linkage_name || @AT_name)

   For selecting structures and classes, we can use either of these
   tools interchangeably.

   So this is fine, but it still shows only functions that take
   structure (or class) arguments directly.  But what if they take a
   const argument?  Or if they take a typedef that evaluates to a
   structure?  For these cases we need to keep peeling the fluff until
   we get to the interesting DIE's.  Enter iterators:

** EXPR*, EXPR+, EXPR? — expression iteration

   - EXPR* leaves the working set unchanged, then adds to that the
     result of one application of EXPR, then of another, etc.  It
     works similarly to * in regular expressions.
   - EXPR+ is exactly like EXPR EXPR*.
   - EXPR? is the same as (, EXPR) — it /may/ apply once

   We can use this tool to remove const_type, volatile_type and
   typedef layers from our potential structure:

   : winfo ?TAG_subprogram !AT_declaration
   : ?(child ?TAG_formal_parameter
   :   @AT_type ((?TAG_const_type, ?TAG_volatile_type, ?TAG_typedef) @AT_type)*
   :   (?TAG_structure_type, ?TAG_class_type))

   Next on, we would like to write a message:

** Literals, Strings, Formatting

   dwgrep understands roughly C-like string literals, using \ as an
   escape character.  Hello world program looks like this in dwgrep:

   : "Hello world!"

   This is an example of a string literal.  Literals in dwgrep add
   themselves to the stack.  There are many types of literals in
   dwgrep--apart from strings and usual numeric literals, dwgrep knows
   about all the named Dwarf constants--e.g. DW_AT_name,
   DW_TAG_array_type, DW_FORM_flag, etc. are all valid dwgrep forms.

   Like C printf, string literals in dwgrep allow formatting
   directives.  To write a nice error message for our running example,
   we could do for example:

   : winfo ?TAG_subprogram !AT_declaration
   : ?(child ?TAG_formal_parameter
   :   @AT_type ((?TAG_const_type, ?TAG_volatile_type, ?TAG_typedef) @AT_type)*
   :   (?TAG_structure_type, ?TAG_class_type))
   : "%s: one of the parameters has non-trivial type."

   When dwgrep sees a string with formatting directives, it converts
   it into a function.  That function pops one parameter for each %s,
   interpolates them all, and then pushes the result to stack.
   Consequently, to convert anything to a string in dwgrep, you would
   just say:

   : "%s"

   The output that our running example above gives would be:

   :  [6c] subprogram: one of the parameters has non-trivial type.

   We would like to improve on that a bit.  We'd like to mention which
   parameter it is, and we'd like to tell the user the name of the
   function, not just a DIE offset.  We'll address both.

** ->X; — name binding

   Often you need to refer back to a value that was computed earlier.
   Since this is a stack machine, one way to do this is to use stack
   shuffling words--dup, swap, rot, over and drop--to move stuff
   around the way you need it.  But keeping track of what is where
   when gets old quickly.  For this reason, dwgrep allows that you
   give value a name.  That removes that value from the stack, and
   introduces a word that, when mentioned, pushes the bound value back
   to stack.

   : 1->A; A A add	# gives 2

   Let's use this tool to remember the two elements that we care
   about: the subprogram (S) and its naked structure parameter (P):

   : winfo ?TAG_subprogram !AT_declaration ->S;
   :
   : S child ?TAG_formal_parameter
   : ?(@AT_type ((?TAG_const_type, ?TAG_volatile_type, ?TAG_typedef) @AT_type)*
   :   (?TAG_structure_type, ?TAG_class_type)) ->P;
   :
   : P S "%s: Parameter %s has non-trivial type."

   Which is not too shabby, but having to keep track of which %s takes
   which value is perhaps not too comfortable.  For that reason,
   dwgrep allows interpolation of expressions in strings.

** %( %) — embedding expressions in formatting strings

   In formatting string, code between %( and the matching %) is
   evaluated in plain context, after which TOS of the result is popped
   and interpolated in formatting string.  %s is then exactly
   equivalent to %(%).

   With this tool, we can make the formatting string quite a bit
   clearer:

   : winfo ?TAG_subprogram !AT_declaration ->S;
   :
   : S child ?TAG_formal_parameter
   : ?(@AT_type ((?TAG_const_type, ?TAG_volatile_type, ?TAG_typedef) @AT_type)*
   :   (?TAG_structure_type, ?TAG_class_type)) ->P;
   :
   : "%( S %): Parameter %( P %) has non-trivial type."

   But that still gives something like:
   : [6c] subprogram: Parameter [8f] formal_parameter has non-trivial type.

   Ideally we'd mention names and source code corrdinates instead of
   Dwarf offsets and tag names.  With interpolation, it's actually
   quite easy:

   : winfo ?TAG_subprogram !AT_declaration ->S;
   :
   : S child ?TAG_formal_parameter
   : ?(@AT_type ((?TAG_const_type, ?TAG_volatile_type, ?TAG_typedef) @AT_type)*
   :   (?TAG_structure_type, ?TAG_class_type)) ->P;
   :
   : "%( S @AT_decl_file %): %( S @AT_decl_line %): note: in function "\
   : "`%( S @AT_name %)', parameter `%( P @AT_name %)' type is not trivial."

   Note the string contiuation syntax using "\.  If a string ends with
   "\ instead of mere ", the following string literal is merged with
   the current one.

   If we were paranoid, we could guard against missing @AT_decl_file
   and @AT_decl_line thus (quoting just the relevant part of the above
   example):

   : "%( S @AT_decl_file || "???" %): %( S @AT_decl_line || "???" %): "\
   : "note: in function `%( S @AT_name %)', "\
   : "parameter `%( P @AT_name %)' type is not trivial."

   Note how you can use string literals inside %( %) inside formatting
   strings.  Not that it would be a good idea to nest layers and
   layers of strings, but for a quick default like this, there's no
   harm.

   So, that's it.  This was a quick tour through the interesting parts
   of dwgrep language.  In the following sections, all of it will be
   introduced in a semi-formal, but rather terse format.


* Stack maintenance

  A stack of values is maintained for each computation context (in
  fact the stack is that context).  Various expressions treat the
  stack in various ways.  In particular

  - initially the stack is composed of a single value of type DIE

  - assertions inspect TOS (or several values on TOS), test the
    condition, and either leave the stack unchanged, or abort the
    computation.  They do not pop.  This includes ?AT_at, !AT_at,
    ?tag, !tag, ?(), !(), ?match, etc.  All assertions start either
    with a ? (if it's positive assertion), or with a ! (if it's
    negative assertion).

  - stack shuffling operators (swap, drop, dup, ...) reorder values on
    the stack

  - literals push a new value on stack
    - integers (1, 0x20, -7)
    - strings ("Ahoj!")
    - sequences ([1, 2, 3])
    - constants (DW_AT_name, DW_FORM_ref_addr, ...)

  - all other forms are called functions.  They pop TOS (possibly
    several times) and push another value depending on those values
    that were popped.  This includes traversal forms (@AT_at, child,
    parent, etc.) and operators (sub, add, etc.).

  dwgrep expressions make it possible to determine stack size
  statically.  dwgrep uses this extensively to remove stack shuffling
  where possible, and to remove stack copying for sub-expression
  evaluation (i.e. <X> <Y> <protect <add a=0;b=1;dst=0> a=0;dst=2> can
  be replaced with <X> <Y> <add a=0;b=1;dst=2>).


* Overview of dwgrep language

  - • means implemented
  - · means partially implemented

** •EXPR → EXPR₁ EXPR₂ — concatenate

   The constituent EXPR's may yield more than one output value.  A new
   working set is formed by gathering all these returned values.  If
   you wish to get an actual list of values instead, see below for []
   operator, which captures the resulting values and wraps them in a
   sequence.

** •EXPR → EXPR₁ “,” EXPR₂ … — alternate

   EXPR yields all the values that EXPR₁ and EXPR₂ yield.  In practice
   this can be used as logical or, or to construct literal lists.

   All constituent EXPR's shall have the same overall stack effect
   (the number of slots pushed - number of slots popped will be the
   same for each branch).

   - For example, to follow through all edges:
     : (child, attribute ?(form "%s" "DW_FORM_ref.*" ?match))

** •EXPR → EXPR₁ “||” EXPR₂ … — first match

   EXPR yields all the values of the first expression that yields
   anything.

** •EXPR → EXPR₁ (“==” | “!=” | “<” | “<=” | “>” | “>=”) EXPR₂ — comparisons

    EXPR is evaluated in subexpression context.  The semantics of (X
    op Y) are:
    : ?([X] elem -> .tmp; [Y] elem .tmp swap OP)
    ... where OP is depending on the operator in question,
    respectively, ?eq, ?ne, ?lt, ?le, ?gt, and ?ge.

    In plain English, X and Y are both evaluated in separate
    sub-expression contexts.  Their TOS's are gathered and compared
    using a comparison assertion word.

** •EXPR → EXPR₁ “*” | EXPR₁ “+” | EXPR₁ “?” — iterate

   EXPR₁ shall have a stack effect of +n,-n (number of slots pushed
   equals number of slots popped).

   - Example: explicit for loop
     : 0 (1 add ?(10 ?lt))*

** •EXPR → “-”?(“0x”|“0o”|“0b”|“0”|“”){digits} — literals
    - 0x and 0X are hexadecimal prefixes.  Valid digits are [0-9a-fA-F].
    - 0o, 0O and 0 are octal prefixes.  Valid digits are [0-7].
    - 0b and 0B are binary prefixes.  Valid digits are [0-1].
    - Without prefix, decimal base is assumed.  Valid digits are [0-9].
    - An initial "-" means the number is negative.

** ·EXPR → (“?”|“!”) literal — literal assertion
    - This is applicable to string and numeric literals.  ?X expands
      to (X ?eq drop), !X similarly to (X !eq drop).

      : [stuff] elem ?(pos ?0)		# pick first element of a list
      : winfo ?(@AT_low_pc ?0)		# select DIE's whose low_pc is 0
      : winfo ?(@AT_name ?"foo")	# select DIE's whose name is "foo"

** •EXPR → “r”? “"” (formatting string) “"”
   - %( and %) enclose an EXPR that's evaluated in plain context, and
     whose input is whatever is the input to the string literal
     itself.  TOS is then popped, converted to a string and embedded
     in the string template.

   - %s stands for %( %)
   - %d stands for %( value %)
   - %x stands for %( value hex %)
   - %o stands for %( value oct %)
   - %b stands for %( value bin %)
   - %% stands for a single %

   - The resulting string is pushed to stack after all interpolations
     are processed one after another.

   - The r"" strings are raw strings.  They work the same as normal
     formatting strings, but escape sequences are left intact in the
     string.

   - String literals can be split, provided that all but the last
     segment end not with a mere quote, but "\.  The following two
     examples produce equivalent programs:
     : "a long string "\ "that continues here"
     : "a long string that continues here"
     Any whitespace (but only whitespace) is allowed between "\ and
     the followig ".

** ·EXPR → (“?”|“!”) “DW_”? “TAG_”, “AT_”, etc. — named constant assertions

   Since majority of comparisons are ?eq or !eq anyway, and many of
   those are vs. constants, there's a number of words for asserting
   value on TOS.

   According to a value on TOS, and a constant family, the following
   rewrire rules define the semantics of a value assertion:

   |---+--------------+---------------+--------------------------|
   | ? | v            | TOS           | Meaning of ?v            |
   |---+--------------+---------------+--------------------------|
   |   | T_*          | any           | ?(type ?v)               |
   | • | DW_TAG_*     | T_DIE         | ?(tag ?v)                |
   | • | DW_TAG_*     | T_CONST       | ?(v ?eq)                 |
   | • | DW_AT_*      | T_DIE         | ?(attribute ?v)          |
   | • | DW_AT_*      | T_ATTR        | ?(name ?v)               |
   | • | DW_AT_*      | T_CONST       | ?(v ?eq)                 |
   | • | DW_FORM_*    | T_ATTR        | ?(form ?v)               |
   | • | DW_FORM_*    | T_CONST       | ?(v ?eq)                 |
   |   | DW_LANG_*    | T_DIE         | ?(@AT_language ?v)       |
   |   | DW_LANG_*    | T_ATTR        | ?(?AT_language value ?v) |
   |   | DW_LANG_*    | T_CONST       | ?(v ?eq)                 |
   |   | DW_ATE_*     | @AT_encoding  | ?(value ?v)              |
   |   | DW_OP_*      | XXX locexpr   |                          |
   |   | DW_LNE_*     | XXX linetab   |                          |
   |   | DW_LNS_*     | XXX linetab   |                          |
   |   | DW_MACINFO_* | XXX macinfo   |                          |
   |   | DW_MACRO_*   | XXX macro     |                          |
   |   | DW_CFA_*     | XXX CFI       |                          |
   |   | DW_CIE_*     | XXX CFI       |                          |
   |   | DW_EH_*      | XXX .eh_frame |                          |
   |   | any          | T_CONST       | ?(v ?eq)                 |
   |---+--------------+---------------+--------------------------|

   The prefix DW_ is optional.  There's no harm spelling it out, but
   since it's so common, you can leave it out.

   For example, ?ATE_unsigned is applicable to an attribute that is
   DW_AT_encoding, or a constant of that domain.

** ·EXPR → (“universe” | “section” | “unit” | “winfo” )

   - "universe" stands for every DIE (and pseudo-DIE) in Dwarf graph.
     Unlike section and unit, it doesn't drop.

   - "section" is similar, but selects only DIE's (or pseudo-DIE's)
     that come from the same section as value on TOS -- e.g. from
     .debug_info, from symbol table, etc.

   - "unit" selects objects belonging to the same logical unit.  This
     may mean a CU, a current line table, etc.

   - "winfo" selects .debug_info.  XXX The rest is not yet in.

   - XXX We might need "unit" to mean "the CU that we came from" and
     something else to mean "local set of entities".

** •EXPR → “(” EXPR₁ “)” — grouping, precedence

** •EXPR → “[” EXPR₁ “]” | “[” “]” — sub-expression capture

   This is a literal form that gathers what EXPR₁ yields and pushes a
   sequence with those elements.  It can be used for constructing a
   sequence literal:

   : [1, 2, 3]        # produces a list with elements 1, 2 and 3
   : [child]          # list of immediate children
   : [child*]         # list of all descendants

   [] is a literal that produces an empty list.  It is exactly
   equivalent to (among others):
   : [ 0 == 1 ]

** •EXPR → “->” ID₀ [ID₁ …] “;” — binding

   - This pops a bunch of values from TOS and binds each of them to
     one identifier ID.  From that point on, mentioning ID is the same
     as pushing the value to TOS.

   - The following two pieces of code are equivalent:
     : ->A B;
     : ->B; ->A;
     The mnemonic for this is that the list of variables describes
     stack layout, with TOS being on the right.

   - When a binding is mentioned that references a closure, that
     counts as invocation of the referenced closure.  In other words,
     there's an implicit "apply" for bindings that reference closures.
     : { 1 add } -> inc;
     : 2 inc	# 3

** ·EXPR → “{” EXPR₁ “}” | “def” ID “{” EXPR₁ “}” | “:”ID | “apply” — blocks

    - {X} -- A block syntax.  A value representing an expression X
      is pushed to TOS.

      XXX -- this needs a block-local bindings.  E.g. in the following:
      : {->F T; ?(F T ?le) F, ?(F T ?lt) F 1 add T seq apply} -> seq;
      F and T are local to the first ALT branch.  This has to be
      rewritten like so:
      : {->F T; (?(F T ?le) F, ?(F T ?lt) F 1 add T seq apply)} -> seq;
      Pretty sure this will cause problems.

      When {X} is executed, this introduces a new activation record
      (dynamic scope) inside the current scope.  Any def's bind
      symbols in this new scope, and words are looked up in this scope
      as well (but of course proceed upwards if the symbol is not
      found).  Any block literals inside this execution remember the
      scope (which in turn remembers its surrounding scope, even if
      the execution already left it), so that they work as closures.

      : {->x; {->y; x y add}} ->adder;
      : 3 adder 2 swap apply	# 5

      : def map { ->L f;  [ L elem f ] }
      : [1, 2, 3] {1 add} map	# [2, 3, 4]

    - def ID X -- equivalent to X ->ID; For functions, syntactically
      arguably clearer than ->X.
      : def double { dup add }
      : 3 double	# 6

      : def fact { ->n; if (n ?1) then 1 else (n n 1 sub fact mul) }
      : 3 fact		# 6

    - :ID -- A symbol syntax.  A value representing symbol ID is
      pushed on TOS.  Normally mentioning a word such as "swap" leads
      directly to that action being performed.  ":swap" instead pushes
      the symbol to TOS.

      :ID value -- resolve symbol on TOS to whatever it's bound to.

    - apply -- if a symbol is on TOS, then get its value.  Then expect
      a block on TOS, which is executed.  If the result of that is
      again a block, that block is not executed.

    - Stack shuffling operators:
      : def drop { ->a; }		# ->(a->)drop;
      : def dup { ->a; a a }		# ->(a->a a)dup;
      : def swap { ->a b; b a }		# ->(a b->b a)swap;
      : def rot { ->a b c; b c a }	# ->(a b c->b c a)rot;
      : def over { ->a b; a b a }	# ->(a b->a b a)over;

** •EXPR → “?(” EXPR₁ “)” | “!(” EXPR₁ “)” — sub-expression assertions

   These ask whether TOS of [ EXPR₁ ] would be, respectively, a
   non-empty or empty list.

   - ?( EXPR₁ ) is exactly equivalent to:
     : [ EXPR₁ ] !empty drop
   - !( EXPR₁ ) is exactly equivalent to:
     : [ EXPR₁ ] ?empty drop

   - Examples:
     : !(child)       # keep leaf DIE's only

** •EXPR → “if” EXPR₀ “then” EXPR₁ “else” EXPR₂ — conditionals

   - EXPR₀ is evaluated in sub-expression context.  If it yields
     anything, EXPR₁ is evaluated in plain context.  Otherwise EXPR₂
     is evaluated in plain context.

**  EXPR → EXPR₁ (“while” | “until”) EXPR₀

   - The "while" loop evaluates EXPR₁ as long as EXPR₀ holds.  In each
     iteration, it checks whether EXPR₀ holds for every computation
     under consideration.  The computations for which EXPR₀ doesn't
     hold are yielded unchanged.  To others, EXPR₁ is applied and what
     this yields is added into consideration.  Then another iteration
     is done.

     : (if EXPR₀ then EXPR₁ else ())* !(EXPR₀)

   - The "until" loop has the same mode of operation, but meaning of
     EXPR₀ is reversed.

     : (if EXPR₀ then () else EXPR₁)* ?(EXPR₀)

   - EXPR₁ has to have neutral stack effect.

** •EXPR → “swap” | “dup” | “over” | “rot” | “drop” — stack shuffling

   These words reorder elements on stack according to the following
   schemes:

   |------+---------+-----------|
   | op   | before  | after     |
   |------+---------+-----------|
   | dup  | A B C D | A B C D D |
   | over | A B C D | A B C D C |
   | swap | A B C D | A B D C   |
   | rot  | A B C D | A C D B   |
   | drop | A B C D | A B C     |
   |------+---------+-----------|

   Realistically, most of what end users should write will be an
   occasional dup, possibly a swap.  Drop shouldn't be needed (that's
   what sub-expressions are for), and the deep stack manipulation
   should be unnecessary as well.  But they are present for
   completeness' sake.

** •EXPR → “elem” — named edge between a list and its elements

   - "elem" pops a list, and for each element yield a stack with that
     element pushed on top

   - To zip contents of two top lists near TOS, do:
     : ->A B; A elem B elem (pos == swap pos)

     This takes two lists from the stack, and produces stacks that
     have those lists replaced with individual elements that
     correspond to each other.  For example:
     : A B [C₁, C₂, C₃] [D₁, D₂, D₃]

     ... would be replaced with three stacks:
     : (A B C₁ D₁, A B C₂ D₂, A B C₃ D₃)

** ·EXPR → “child”|“attribute”|“parent”|“next”|“prev”|“integrate” — traversal

   - "child" pops DIE on TOS and yields one stack for each child,
     with that child pushed to TOS.

   - "attribute" does the same with attributes instead of children

   - "parent" is exactly equivalent to:
     : universe ?(child ?eq) swap drop
     Note that in case of imported units, "parent" may return more
     than one DIE!  (XXX This doesn't seem desirable?)

     : def next {->D;
     :     D parent child (== D) pos 1 add ->next_pos;
     :     D parent child (pos == next_pos)
     : }
     The first line is necessary to make sure that pos later refers
     to order in children array, not to e.g. a result of ([XYZ] each).

   - "prev" can be defined in manner similar to next.

   - "integrate" is equivalent to the following:
     : (@AT_abstract_origin || @AT_specification)

     It is meant to be used as named edge between a DIE and its
     abstract instance(s).  In particular, the following idioms might
     be useful:
     : integrate* ?AT_xyz		# find DIE's with DW_AT_xyz
     : integrate* @AT_xyz		# all AT_xyz's in chain
     : [integrate*]			# the whole integration chain
     :
     : (!AT_xyz integrate)* ?AT_xyz	# find closest DIE with DW_AT_xyz
     : ?(integrate* ?AT_xyz)		# dwarf_hasattr_integrate
     : (!AT_xyz integrate)* attribute ?AT_xyz	# dwarf_attr_integrate
     : (!AT_xyz integrate)* @AT_xyz	# value of integrated DW_AT_xyz

   - Given the above as "integrate1", this would be useful as well:
     : {->Op; (!(Op) integrate1)* Op} -> integrate;

     This then can be used as follows:
     : {?AT_xyz} integrate		# find closest DIE with DW_AT_xyz
     : ?({?AT_xyz} integrate)		# dwarf_hasattr_integrate
     : {attribute ?AT_xyz} integrate	# dwarf_attr_integrate
     : {@AT_xyz} integrate		# value of integrated DW_AT_xyz

     We could actually switch between this and the above thus:
     : if (type == T_CLOSURE) then integrate else integrate1

** •EXPR → “?root” | “!root” — root node assertion

   - !root is exactly equivalent to:
   - ?root is exactly equivalent to:
     : (type == T_DIE) !(parent)

   - Examples:
     : parent* ?root        # finds a root node of node on TOS

** ·EXPR → “@”AT_ID — attribute value

   This function pops a DIE off TOS and pushes a value of its
   attribute DW_AT_ID.  If you want to access the attribute object
   itself instead, use:

   : attribute ?AT_ID

** ·EXPR → “offset” | “address”

   - "offset" pops a graph node on TOS and pushes a value representing
     offset of the object.  The interpretation of offset differs by
     node type.  For example, location expression operations yield
     offset relative to the start of location expression, DIE's offset
     is relative to start of Dwarf file.

   - "address" works similarly, but instead of a file- or node- based
     offset, it yields address within client address space.

     For DIE's, this is like calling dwarf_ranges, i.e. yields
     addresses where the DIE has valid PC.

     Applied to an attribute that's either DW_AT_high_pc or
     DW_AT_entry_pc with non-DW_FORM_addr form, this might maybe
     convert them to address.

** •EXPR →  “label” | “form” | “value” — Dwarf tree introspection

   - "label" pops a graph node on TOS and pushes a value representing
     and identifier of node kind.  This would be a DIE tag, an
     attribute name, a location expression operation, or similar.

   - "form" pops Attribute on TOS and pushes back a value
     representing its form.

   - "value" pops Attribute on TOS and yields one stack for each
     value associated with this Attribute, with that value pushed to
     TOS.  Typically this would yield a single stack with a string or
     integer on top, but it may yield e.g. several pseudo-DIEs for
     things like @AT_stmt_list.

** •EXPR → “?”ID | “!”ID — DIE tag assertion

   - ?ID is exactly equivalent to:
     : (tag == DW_TAG_ID)
   - !ID is exactly equivalent to:
     : (tag == DW_TAG_ID)
   - Note that either form fails when applied to a non-DIE value.

** •EXPR → “?AT_”ID | “!AT_”ID — attribute presence/absence assertions

   - If the value on TOS is a DIE, these forms assert that they have
     (don't have) an attribute with a given name.

     - Instead of using "?AT_ID", one can also simply access the
       attribute value with "@AT_ID".  If such attribute is not
       available, that computation is aborted.

   - If the value on TOS is an Attribute, these forms assert that the
     attribute has a given name.

** •EXPR → “type” — TOS introspection

   This produces an integer value suitable for comparison with the
   following constants:

   - T_DIE — for Dwarf_Die's
   - T_ATTR — for Dwarf_Attribute's
   - T_SEQ — for sequence objects
   - T_STR — for string objects
   - T_CONST — for integer objects
   - T_FLOAT — for floats

** •EXPR → “pos” — position of element within producing expression

   Each function numbers elements that it produces, and stores number
   of each element along with the element.  That number can be
   recalled by saying "pos".

   If you wish to know the number of values produced, you have to
   count them by hand:
   : [ child ] dup length->L; elem

**  EXPR → “get” | “last” | “slice” | “reverse” — sequence transformations

   - def slice { ->S M N; ...}
     S is a sequence or a string
     M an N are coordinates of the slice

     The "slice" operator yields a sequence (or string) with elements
     of S that are between M (inclusive) and N (not inclusive).  If M
     or N are negative, they are relative to the length of the
     sequence.

     : [child] 0 -1 slice	# snip the last element

   - def get { ->S N; ... }
     S is a sequence or a string
     N is a coordinate of an element to pick

     get takes N-th element of a sequence or a string, counting
     from 0.  Negative values are relative to the length of the
     sequence, so that -1 is the last element, -2 the one before last,
     etc.

   - reverse expects a sequence or a string on TOS.  It produces the
     same sequence with elements in reverse order.

   - last is equivalent to (-1 get)

** •EXPR → “add” | “sub” | “mul” | “div” | “mod” — arithmetic

   - Two elements are popped: A and B, with B the original TOS, and "A
     op B" is pushed again.

   - "add" is meaningful for two constants, two strings or two
     sequences.  Other operators are only meaningful for constants.

   - division and modulo by zero produce an error message and abort
     current computation.

** ·EXPR → “hex” | “oct” | “bin” | [“u”]“int”(“32”|“64”) — casting
   - hex, oct and bin change the domain of a constant on TOS.
     : 64 hex		# gives 0x40
     : DW_AT_name hex	# gives 0x3
     The value remains a constant, only the way it's displayed
     changes.  You can use "%s" to convert it to a string, in which
     case it's rendered with the newly-selected domain.
     : DW_AT_name "%s"		# gives "DW_AT_name"
     : DW_AT_name hex "%s"	# gives "0x3"

   - The idea behind uint32_t et.al. is that a two-complement
     representation of a given constant is taken, if necessary, it's
     sign-extended, and then a 32-bit or 64-bit slice of that is
     taken, and that is reinterpreted as either a signed or unsigned
     value:
     : -1 hex			# gives -0x1
     : -1 uint32_t hex		# gives 0xffffffff
     : -1 uint64_t hex		# gives 0xffffffffffffffff
     : 0xffffffff int32_t	# gives -1
     : 0xffffffffff int32_t	# gives -1 as well
     : 0xffffffff int64_t	# gives 0xffffffff
     Maybe what we want instead is "32 uint", "64 int" etc., such that
     bit length is configurable.  Presumably it's not a big deal with
     GMP under the hood.

** •EXPR → (“?”|“!”)(“eq”|“ne”|“gt”|“ge”|“lt”|“le”) — comparison assertions

   - Two elements are inspected: TOS and one below that (B and A,
     respectively).  The assertion holds if A op B is true.  Comparing
     values of different types is not defined, and such assertions
     fail as well.

   - Note that there is both !eq and ?ne, !lt and ?ge, etc.  These
     are mostly for symmetry--the assertions need "?" to denote that
     they are assertions, so why not have "!" forms as well.  For !eq
     it even makes a good sense.

   - Certain integer values have enum-like characteristics.  These
     include those produced by "label", "form", those produced by
     access to certain attributes (such as @AT_language), and
     constants (e.g. DW_AT_name, DW_TAG_class_type, etc.).  For these
     values, dwgrep remembers their domain.  If two values are
     compared such that both have a domain assigned, and those domains
     differ, a warning is produced, because that's likely a flaw in
     the expression.

   - Examples:
     : A B swap? ?lt drop    # "max" -- keep the greater number on stack
     : A B swap? ?gt drop    # "min"

** •EXPR → (“?”|“!”)“match” — regex assertion

   This produces nothing when applied to non-string values.  Use "%s"
   to convert other value types to string.

   This is similar to “?eq” and “!eq”, except asserts that TOS (which
   is a string with a regular expression) matches the value below
   TOS.

   - "match" does a full-string match

** •EXPR → (“?”|“!”)“find” — search in a sequence

   - A B find looks for sub-sequence or sub-string B inside A
     (e.g. "haystack" ?("needle" ?find) or [hay stack] ?([needle]
     ?find)).

   - To determine whether a sequence contains a particular element,
     you would use the following construct:
     : [that sequence] (elem == something)
     E.g.:
     : [child @AT_name] ?(elem ?"foo")
     : [child] ?(elem @AT_name ?"foo")

   - To pick only those elements that match, you could do the
     following:
     : [child]->L; [L elem ?(@AT_name ?"foo")]
     The above is suitable for a function that takes a list on input
     and wants to filter it.  It is of course preferable to write this
     sort of thing directly, if possible:
     : [child ?(@AT_name ?"foo")]

** •EXPR → “length” — length of a sequence or a string

** •EXPR → (“?”|“!”)“empty” — list/string emptiness assertion
     : def "?empty" { length == 0 }
     : def "!empty" { length != 0 }

**  EXPR → “demangle” — demangle a string on TOS

** •EXPR → “\dbg” — debug assertion

   Always succeeds, but as a side effect prints some information about
   the computation in whose context it appeared.

** •colon infix syntax
    - When a word is followed by a colon, the following statement is
      executed before that word.  That can be used for writing the
      operators, where it makes sense, in infix form.  For example:
      : 10 add: 1	# equivalent to (10 1 add)
      : [10 range] sort: {->a; if (a mod: 2 ?0) then 0 else 1}


* TODO

** @AT_decl_file — represented as actual string including path
   (XXX we ignore mtime and size.  Those aren't stored anyway, but
   maybe it would be useful to have them so that one can do this sort
   of querying in the first place--do we have any files where this is
   stored?  Or after it gets to be stored in general, where this is
   _not_ stored?)

** @AT_high_pc constant, @AT_entry_pc constant — convert to full address???
   http://dwarfstd.org/ShowIssue.php?issue=120719.1

   This could be optionally interpreted, i.e. @AT_high_pc whose form
   is DW_FORM_data* would actually yield a value computed from
   DW_AT_ranges or DW_AT_low_pc.

** @AT_MIPS_linkage_name — translated to @AT_linkage_name automatically

** XXX @AT_stmt_list

   @AT_stmt_list yields a number of nodes of type line_table_entry.
   The following words (which are thin wrappers around similarly named
   libdw functions) are applicable to individual line table entries:

   : address
   : @lineop_index
   : @lineno
   : @linecol
   : @linebeginstatement, ?linebeginstatement, !linebeginstatement
   : @lineendsequence, ?lineendsequence, !lineendsequence
   : @lineblock, ?lineblock, !lineblock
   : @lineprologueend, ?lineprologueend, !lineprologueend
   : @lineepiloguebegin, ?lineepiloguebegin, !lineepiloguebegin
   : @lineisa
   : @linediscriminator

   The operators that return a boolean constant come also in assertion
   variant so that it's easy to filter interesting line table entries.

   XXX That's however not entirely consistent with how DW_FORM_flag*
   attributes behave.  For those, ?AT_* always means, is this
   attribute present, and never, is the value true.  Needs some more
   thinking to consolidate this.  Maybe we could abandon the @op's for
   these and just expose ?op's.  When ?x is present, it implies that
   @op is true.

** location expressions

   Some attributes refer to a location expression.  These are
   represented as a number of pseudo-DIE's of type T_LOCLIST_ELEM.
   Children of these nodes are T_LOCLIST_OP, individual operations of
   location expression.

   - XXX possibly a means of evaluating?  (Could we use the in-program
     stack for evaluating the Dwarf expression?)

*** •T_LOCLIST_ELEM

    - "address" yields a value of type T_ADDR_RANGE where given
      location expression applies.

    - "child" yields individual location expression operators
      (T_LOCLIST_OP).

*** •T_LOCLIST_OP

    - "offset" yields an offset of this op within the location
      expression.

    - "label" yields operation opcode (a DW_OP_* constant)

    - "value" is applicable, and yields operands associated with this
      location expression operation.

    [4e] variable
         [...]
         location (exprloc) [0x0..0xffffffffffffffff, [0:fbreg<-18>]]

    Here we have only one T_LOCLIST_OP, and that has an offset of 0, a
    label of DW_OP_fbreg, and yields one value, -18.

***  T_ADDR_RANGE

    - "low" ??? -- applicable to T_DIE as well, with meaning of dwarf_lowpc.
    - "high" ??? -- likewise for dwarf_highpc
    - "?contains" ??? (for T_ADDR_RANGE x T_CONST, T_ADDR_RANGE x
      T_ADDR_RANGE) Or maybe ?lt, ?gt and others?
    - "?eq" ??? (for T_ADDR_RANGE x T_CONST, T_CONST x T_ADDR_RANGE,
      T_ADDR_RANGE x T_ADDR_RANGE) -- consts would be considered a
      one-element range
    - a way of constructing this (X Y arange ???  or a syntax X..Y???)

    - "add", "sub" ???  Do we need a general "coverage" sort of value
      (like what dwarflint used to have)?  What if 'sub' that pokes a
      hole in just produces a bunch of T_ADDR_RANGE's.  Coverage would
      then be something like [something sub: (X Y arange)] -- i.e. we
      would capture the constituents.  Membership test would be
      ?(elem ?contains: X).  But then arithmetic over these lists becomes
      hell.

    - T_ADDR_RANGE actually behaves pretty much like a sequence of
      integers.  Maybe sequence could have an optimization whereby if
      it contains all integers, it just stores low×high pairs instead
      of listing each value separately.

    - We would still need a way of promoting assertions directly to
      "elem" such that it can do something clever instead of
      enumerating all 64 bits of adress space or some such.

** ELF symbols

   Each symbol table entry (in SHT_SYMTAB, SHT_DYNSYM and minisymtab)
   is represented by a pseudo-DIE of type DW_TAG_symbol.  It has the
   following attributes: @size, @bind, @visibility, @name, and @index.
   label yields symbol type.  value yields symbol value.

   XXX Instead of @index we'd like to have a @section which links to a
   pseudo-DIE representing a section.

   DW_FORM_addr -- maybe we should handle them similarly to
   readelf...?  Have a domain for addresses, and possibly (unless -N)
   translate addresses to symbols on output?

** XXX Dwarf CU version -- an artificial attribute?
   - https://stackoverflow.com/questions/16169864

** XXX abbreviation section?
   - note that one can look for attribute form by saying (attribute
     ?AT_at form)
   - would a link from a DIE to its abbreviation be useful?

** XXX integrating addr2line
   - low_pc and high_pc should be convertible to symbol name on
     request (possibly manually by cross-matching with ELF symtabs).

** XXX .debug_frame, .eh_frame
   - do we need an overarching "theory" for both of these?
   - also, there's fair amount of tables around here (symbol tables,
     line tables, ...).  Does it make sense to understand them as
     first-class citizen of some sort?  Currently we understand there
     are values, every value has some properties, and some values have
     attributes.

** XXX .debug_macro

** XXX optional inlining of DW_TAG_partial unit
   - We don't interpret DW_TAG_imported_unit at all currently.
     Eventually we'll probably want to inline this by default, but
     also have a way to actually see the DW_TAG_imported_unit DIE's as
     well.

   - (Note that DW_TAG_imported_module and DW_TAG_imported_declaration
     are for "using namespace X" and "using X" respectively, so
     unrelated to this.)

** XXX multithreading
   - processing Dwarf has the potential for a lot of concurrency.  If
     locks end up serializing, we might actually open the Dwarf in
     each thread anew, and see if that helps.


* Examples

** Josh Stone's nontrivial-parameters script

   : winfo ?TAG_subprogram !AT_declaration
   : ?(@AT_decl_file ?("^/usr/" ?match) ?("^/usr/src/debug" !match)) -> A;
   :
   : A child ?TAG_formal_parameter
   : ?(@AT_type ((?TAG_const_type, ?TAG_volatile_type, ?TAG_typedef) @AT_type)*
   :   (?TAG_structure_type, ?TAG_class_type)) -> B;
   :
   : "%( A @AT_decl_file %): %( A @AT_decl_line %): note: in function "\
   : "`%( A @AT_name %)', parameter `%( B @AT_name %)' type is not trivial"

** check_die_decl_call:
   : (winfo ?AT_decl_column !AT_decl_line "%s has decl_column, but NOT decl_line"
   : , etc.)

** check_die_line_info:
   : winfo (?TAG_subprogram, ?TAG_inline_subroutine, ?TAG_entry_point,
   :        ?TAG_lexical_block, ?TAG_label, ?TAG_with_stmt, ?TAG_try_block,
   :        ?TAG_catch_block) ->A;
   : A (@AT_entry_pc, @AT_low_pc, @AT_ranges) ->B;
   : A parent* ?root !(@AT_stmt_list @lineaddr == B) ->C;
   : "Address %( B %) referenced from %( C %) not found in line table."

** contains DW_OP_fbreg && ! @frame_base
   : !AT_frame_base (@AT_location label == DW_OP_fbreg)

** uses register based operators

   : ?(@AT_location label (== DW_OP_bregx || (>= DW_OP_reg0) (<= DW_OP_regx)))

   : ?(@AT_location label "%s" "_b?reg" ?find)

** whether it uses a deref operator

   : ?(@AT_location label (?OP_deref, ?OP_xderef, ?OP_deref_size,
   :                       ?OP_xderef_size, ?OP_GNU_deref_type))

   : ?(@AT_location label "%s" "deref" ?find)

** contains DW_OP_call_frame_cfa && $@low_pc == 0

   : winfo ?(@AT_low_pc ?0) ?(@AT_frame_base ?OP_call_frame_cfa)

   : winfo (@AT_low_pc == 0) ?(@AT_frame_base ?OP_call_frame_cfa)

** is an empty location expression

   : winfo ?AT_location !(@AT_location)

** location expression ends with implicit_value or stack_value

   : winfo ?([@AT_location] -1 get label
   : (?DW_OP_implicit_value, ?DW_OP_stack_value))

** types inconsistent between instance and specification
   - http://gcc.gnu.org/bugzilla/show_bug.cgi?id=43053

     : winfo ?TAG_subprogram ->A;
     : A child ?TAG_formal_parameter ->B;
     : A @AT_specification child ?TAG_formal_parameter ->C;
     : (B pos == C pos) (B @AT_type != C @AT_type) A

** duplicat DW_TAG_const_type
   - http://gcc.gnu.org/bugzilla/show_bug.cgi?id=56740

     : { ?TAG_const_type, ?TAG_volatile_type, ?TAG_restrict_type } -> ?cvr_type;
     : winfo ?cvr_type ->A;
     : A unit ?(> A) ?cvr_type ->B;
     : (A tag == B tag) (A @AT_type == B @AT_type)
     : A B

** find any attribute with value "blah"
   : attribute (value == "blah")

** check_duplicate_DW_tag_variable.cc
   Check for two full DW_TAG_variable DIEs with the same DW_AT_name
   value.

   : winfo ?TAG_variable dup next+ ?TAG_variable (@AT_name == swap @AT_name)

   - XXX
     : winfo dup next+ <?TAG_variable @AT_name>?eq

** check_linkage_external_die.cc

     : def GetSym {->X; symtab (?STT_OBJECT, ?STT_FUNC)
     :             (@name == X @AT_linkage_name)}
     : winfo ?AT_linkage_name if !(GetSym) then (
     :     !AT_declaration !AT_const_value
     :     (!structure_type !enumeration_type !union_type, ?AT_name)
     :     "%s has linkage_name attribute that's not in symtab, "\
     :     "but is not marked as declaration"
     : ) else if GetSym ?STB_LOCAL then (
     :     !AT_declaration ?AT_external
     :     "%s has linkage_name attribute, "\
     :     "but the corresponding symbol is local"
     : ) else (
     :     !AT_external
     :     "%s has linkage_name attribute, but no external attribute"
     : )

   This is still 1:10 vs. dwarflint C++ (i.e., say 1:20 if we had to
   explore the DIE tree by hand), but fairly involved.

   The interpreter would need to notice the ?symbol nodes are used as
   a sort of global variable for cross-referencing, otherwise this
   would lead to an ugly combinatorial explosion of states.  Noticing
   that we look at the bottom slot and cross-reference @AT_name with
   @AT_linkage_name should be possible.

** CU A imports two PU's B and C, and both import the same third PU

   : {parent* ?root child ?TAG_imported_unit @AT_import} ->imports;
   :
   : winfo ?root ->U;
   : U child ?TAG_imported_unit @AT_import ->A;
   : U child ?TAG_imported_unit @AT_import ?(A ?lt) ->B;
   : A imports B imports ?eq
   : "PU %(offset%) is imported by PU's %(A offset%) and %(B offset%), "\
   : "which are both imported by %(U offset%)."

** typedef resolution
   - dsmith asked for a way to get typedef "resolution" from DWARF
     (for use with the syscall types in the kernel). Which was timely
     since I was just thinking about having some "roundtripping" tests
     for GCC/elfutils DWARF types. So hacked up a dwfltypedef that
     prints all (C) typedefs found:

     $ ./dwfltypedef -e ./dwfltypedef
     [2d] typedef size_t long unsigned int (unsigned, 8 bytes);
     [70] typedef __off_t long int (signed, 8 bytes);
     [7b] typedef __off64_t long int (signed, 8 bytes);
     [...]

     : winfo ?TAG_typedef ->T;
     : T @AT_type (?TAG_typedef @AT_type)* !TAG_typedef ->U;
     : "[%(T offset%)] typedef %(T @AT_name%) %(U @AT_name%) "\
     : "(%( U @AT_encoding || "???" %), %( U @AT_byte_size || "???" %) bytes)"

     [0x57] typedef __int32_t int (DW_ATE_signed, 4 bytes)
     [0x70] typedef __off_t long int (DW_ATE_signed, 8 bytes)
     [0x7b] typedef __off64_t long int (DW_ATE_signed, 8 bytes)
     [0x9c] typedef __intptr_t long int (DW_ATE_signed, 8 bytes)
     [0xa7] typedef size_t long unsigned int (DW_ATE_unsigned, 8 bytes)
     [...]

** nested identifier names
   : (@AT_name == "a") child (@AT_name == "b") child (@AT_name == "c")
